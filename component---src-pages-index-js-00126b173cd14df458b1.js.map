{"version":3,"sources":["webpack://calvin.me/./src/components/PostListing.js","webpack://calvin.me/./src/components/SEO.js","webpack://calvin.me/./src/pages/index.js"],"names":["config","require","PostListing","getPostList","postEdges","this","props","pathPrefix","map","postEdge","path","node","fileAbsolutePath","split","slice","substr","tags","frontmatter","thumbnail","title","date","formatDate","excerpt","timeToRead","categories","render","postList","className","post","childImageSharp","gatsbyImageData","Link","to","key","G","image","Component","SEO","description","postURL","postNode","postPath","postSEO","postMeta","getSrc","urljoin","replace","blogURL","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","Index","handleChange","event","target","value","setState","filterPosts","state","posts","searchTerm","filteredPosts","filter","every","str","toLowerCase","includes","data","edges","filterCount","length","group","category","fieldValue","htmlFor","id","placeholder","onChange"],"mappings":"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","file":"component---src-pages-index-js-00126b173cd14df458b1.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { formatDate } from '../utils/global'\n\nconst config = require('../../data/SiteConfig')\n\nexport default class PostListing extends Component {\n  getPostList() {\n    const { postEdges } = this.props\n    const pathPrefix = config.pathPrefix === '' ? '/' : config.pathPrefix\n    const postList = postEdges.map(postEdge => (\n      {\n        path: pathPrefix + postEdge.node.fileAbsolutePath.split('/').slice(-2)[0].substr(11),\n        tags: postEdge.node.frontmatter.tags,\n        thumbnail: postEdge.node.frontmatter.thumbnail,\n        title: postEdge.node.frontmatter.title,\n        date: formatDate(postEdge.node.fileAbsolutePath.split('/').slice(-2)[0].substr(0, 10)),\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n        categories: postEdge.node.frontmatter.categories,\n      }\n    ))\n    return postList\n  }\n\n  render() {\n    const postList = this.getPostList()\n\n    return (\n      <section className=\"posts\">\n        {postList.map(post => {\n          let thumbnail\n          if (post.thumbnail) {\n            thumbnail = post.thumbnail.childImageSharp.gatsbyImageData\n          }\n\n          return (\n            <Link to={post.path} key={post.title}>\n              <div className=\"each\">\n                {thumbnail ? <GatsbyImage image={thumbnail} /> : <div />}\n                <div className=\"each-list-item\">\n                  <h2>{post.title}</h2>\n                  <div className=\"datetime\">{post.date}</div>\n                </div>\n              </div>\n            </Link>\n          )\n        })}\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { getSrc } from \"gatsby-plugin-image\"\nimport urljoin from 'url-join'\nimport config from '../../data/SiteConfig'\n\nexport default class SEO extends Component {\n  render() {\n    const replacePath = path => (path === `/` ? path : path.replace(/\\/$/, ``));\n    const { postNode, postPath, postSEO } = this.props\n    let title\n    let description\n    let image = ''\n    let postURL\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter\n      title = postMeta.title\n      description = postMeta.description ? postMeta.description : postNode.excerpt\n      if (postMeta.thumbnail) {\n        image = getSrc(postMeta.thumbnail.childImageSharp.gatsbyImageData)\n      }\n      postURL = urljoin(config.siteUrl, replacePath(postPath))\n    } else {\n      title = config.siteTitle\n      description = config.siteDescription\n      image = config.siteLogo\n    }\n\n    image = urljoin(config.siteUrl, image)\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n      },\n    ]\n\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n          headline: title,\n          image: {\n            '@type': 'ImageObject',\n            url: image,\n          },\n          description,\n        }\n      )\n    }\n    return (\n      <Helmet>\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        <script type=\"application/ld+json\">{JSON.stringify(schemaOrgJSONLD)}</script>\n\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO && <meta property=\"og:type\" content=\"article\" />}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:creator\" content={config.userTwitter} />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchTerm: '',\n      posts: this.props.data.posts.edges,\n      filteredPosts: this.props.data.posts.edges,\n    }\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target\n\n    this.setState({ [name]: value }, () => this.filterPosts())\n  }\n\n  filterPosts = () => {\n    const { posts, searchTerm } = this.state\n\n    const filteredPosts = posts.filter(post =>\n      searchTerm.split(/\\s+/).every(str => post.node.frontmatter.title.toLowerCase().includes(str.toLowerCase()))\n    )\n\n    this.setState({ filteredPosts })\n  }\n\n  render() {\n    const { filteredPosts, searchTerm } = this.state\n    const filterCount = filteredPosts.length\n    const categories = this.props.data.categories.group\n\n    return (\n      <Layout>\n        <Helmet title={`${config.siteTitle} – Tech Blog`} />\n        <SEO />\n        <div className=\"container\">\n          <div className=\"lead\">\n            <div className=\"elevator\">\n              <h1>Hi, I&apos;m Calvin 👋</h1>\n              <p>I&apos;m a DevOps Engineer passionate about IT as a career and hobby!</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container front-page\">\n          <div className=\"category-container\">\n            {categories.map(category => (\n              <Link\n                to={`/categories/${category.fieldValue.toLowerCase()}`}\n                className=\"category-filter\"\n                key={category.fieldValue}\n              >\n                {category.fieldValue}\n              </Link>\n            ))}\n          </div>\n          <label htmlFor=\"searchTerm\">Filter posts</label>\n          <div className=\"search-container\">\n            <input\n              id=\"searchTerm\"\n              className=\"search\"\n              type=\"text\"\n              name=\"searchTerm\"\n              value={searchTerm}\n              placeholder=\"Type here to filter posts...\"\n              onChange={this.handleChange}\n            />\n            <div className=\"filter-count\">{filterCount}</div>\n          </div>\n          <PostListing postEdges={filteredPosts} />\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    posts: allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fileAbsolutePath], order: DESC }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 180)\n          timeToRead\n          fileAbsolutePath\n          frontmatter {\n            title\n            tags\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: FIXED\n                  width: 50\n                  height: 50\n                  quality: 100\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n    categories: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___categories) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}