{"version":3,"sources":["webpack://calvin.me/./src/components/SEO.js","webpack://calvin.me/./src/pages/404.js"],"names":["SEO","render","title","description","postURL","path","this","props","postNode","postPath","postSEO","image","postMeta","frontmatter","excerpt","thumbnail","childImageSharp","getSrc","gatsbyImageData","publicURL","urljoin","config","replace","blogURL","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","Component","NotFoundPage","componentDidMount","setNotFound","context","componentWillUnmount","setFound","className","contextType","ThemeContext"],"mappings":"6NAMqBA,E,6FACnBC,OAAA,WACE,IAEIC,EACAC,EAEAC,EALgBC,EACpB,EAAwCC,KAAKC,MAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,QAGxBC,EAAQ,GAGZ,GAAID,EAAS,CACX,IAAME,EAAWJ,EAASK,YAC1BX,EAAQU,EAASV,MACjBC,EAAcS,EAAST,YAAcS,EAAST,YAAcK,EAASM,QACjEF,EAASG,YAETJ,EADEC,EAASG,UAAUC,iBACbC,OAAOL,EAASG,UAAUC,gBAAgBE,iBAE1CN,EAASG,UAAUI,WAG/Bf,EAAUgB,IAAQC,YAlBa,OAAbhB,EAkB4BI,GAlBJJ,EAAOA,EAAKiB,QAAQ,MAAb,UAoBjDpB,EAAQmB,cACRlB,EAAckB,oBACdV,EAAQU,aAGVV,EAAQS,IAAQC,YAAgBV,GAChC,IAAMY,EAAUH,IAAQC,YAAgBA,gBAClCG,EAAkB,CACtB,CACE,WAAY,oBACZ,QAAS,UACTC,IAAKF,EACLG,KAAMxB,EACNyB,cAAeN,iBAAsBA,iBAAsB,KAoC/D,OAhCIX,GACFc,EAAgBI,KACd,CACE,WAAY,oBACZ,QAAS,iBACTC,gBAAiB,CACf,CACE,QAAS,WACTC,SAAU,EACVC,KAAM,CACJ,MAAO3B,EACPsB,KAAMxB,EACNS,YAKR,CACE,WAAY,oBACZ,QAAS,cACTc,IAAKF,EACLG,KAAMxB,EACNyB,cAAeN,iBAAsBA,iBAAsB,GAC3DW,SAAU9B,EACVS,MAAO,CACL,QAAS,cACTc,IAAKd,GAEPR,gBAKJ,gBAAC,IAAD,KACE,wBAAMuB,KAAK,cAAcO,QAAS9B,IAClC,wBAAMuB,KAAK,QAAQO,QAAStB,IAE5B,0BAAQuB,KAAK,uBAAuBC,KAAKC,UAAUZ,IAEnD,wBAAMa,SAAS,SAASJ,QAASvB,EAAUN,EAAUmB,IACpDb,GAAW,wBAAM2B,SAAS,UAAUJ,QAAQ,YAC7C,wBAAMI,SAAS,WAAWJ,QAAS/B,IACnC,wBAAMmC,SAAS,iBAAiBJ,QAAS9B,IACzC,wBAAMkC,SAAS,WAAWJ,QAAStB,IAEnC,wBAAMe,KAAK,eAAeO,QAAQ,wBAClC,wBAAMP,KAAK,kBAAkBO,QAASZ,kBACtC,wBAAMK,KAAK,gBAAgBO,QAAS/B,IACpC,wBAAMwB,KAAK,sBAAsBO,QAAS9B,IAC1C,wBAAMuB,KAAK,gBAAgBO,QAAStB,M,GAxFX2B,c,kKCCZC,E,sGACnBC,kBAAA,YAGEC,EAFwBnC,KAAKoC,QAArBD,gB,EAKVE,qBAAA,YAGEC,EAFqBtC,KAAKoC,QAAlBE,a,EAKV3C,OAAA,WACE,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAQC,MAAK,oBAAsBmB,gBACnC,gBAAC,IAAD,MACA,uBAAKwB,UAAU,aACb,uBAAKA,UAAU,eACb,kCAEF,iEACuC,wBAAMA,UAAU,aAAhB,gBADvC,4BAIA,uBAAKA,UAAU,QACb,yBACE,wBAAMA,UAAU,UAAhB,KADF,yDAGA,yBACE,wBAAMA,UAAU,UAAhB,KADF,sGAKF,qBAAGA,UAAU,cAAb,6BAC4B,wBAAMA,UAAU,SAAhB,S,GApCIP,aA4C1CC,EAAaO,YAAcC","file":"component---src-pages-404-js-b7161fbf0e3b5ffe502b.js","sourcesContent":["import React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { getSrc } from \"gatsby-plugin-image\"\nimport urljoin from 'url-join'\nimport config from '../../data/SiteConfig'\n\nexport default class SEO extends Component {\n  render() {\n    const replacePath = path => (path === `/` ? path : path.replace(/\\/$/, ``));\n    const { postNode, postPath, postSEO } = this.props\n    let title\n    let description\n    let image = ''\n    let postURL\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter\n      title = postMeta.title\n      description = postMeta.description ? postMeta.description : postNode.excerpt\n      if (postMeta.thumbnail) {\n        if (postMeta.thumbnail.childImageSharp) {\n          image = getSrc(postMeta.thumbnail.childImageSharp.gatsbyImageData)\n        } else {\n          image = postMeta.thumbnail.publicURL\n        }\n      }\n      postURL = urljoin(config.siteUrl, replacePath(postPath))\n    } else {\n      title = config.siteTitle\n      description = config.siteDescription\n      image = config.siteLogo\n    }\n\n    image = urljoin(config.siteUrl, image)\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n      },\n    ]\n\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n          headline: title,\n          image: {\n            '@type': 'ImageObject',\n            url: image,\n          },\n          description,\n        }\n      )\n    }\n    return (\n      <Helmet>\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        <script type=\"application/ld+json\">{JSON.stringify(schemaOrgJSONLD)}</script>\n\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO && <meta property=\"og:type\" content=\"article\" />}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:creator\" content={config.userTwitter} />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\nimport ThemeContext from '../context/ThemeContext'\nimport Layout from '../layout'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\n\nexport default class NotFoundPage extends Component {\n  componentDidMount() {\n    const { setNotFound } = this.context\n\n    setNotFound()\n  }\n\n  componentWillUnmount() {\n    const { setFound } = this.context\n\n    setFound()\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Helmet title={`Page not found â€“ ${config.siteTitle}`} />\n        <SEO />\n        <div className=\"container\">\n          <div className=\"text-center\">\n            <h1>404</h1>\n          </div>\n          <p>\n            A fatal exception 0E has occurred at <span className=\"error-msg\">0x74616e6961</span> in 404:\n            page not found.\n          </p>\n          <div className=\"list\">\n            <p>\n              <span className=\"bullet\">*</span> Click any link to terminate the current application.\n            </p>\n            <p>\n              <span className=\"bullet\">*</span> Press ALT + F4 again to restart your browser. You\n              will lose any unsaved information in all tabs.\n            </p>\n          </div>\n          <p className=\"text-right\">\n            Click any link to continue<span className=\"blink\">&#9608;</span>\n          </p>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nNotFoundPage.contextType = ThemeContext\n"],"sourceRoot":""}